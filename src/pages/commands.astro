---
import Layout from "../layouts/Layout.astro";
---

<Layout title="commands">
  <main>
    <div class="mb-4">
      <h1 class="flex flex-col justify-center items-center p-4">
        <span class="mr-2"
          >prefix: <span class="text-stone-200 hover:text-stone-300">,</span> |
          example: <span class="text-stone-200 hover:text-stone-300">,ping</span
          ></span
        >
      </h1>
      
      <div class="max-w-xl mx-auto mb-6">
        <input 
          type="text" 
          id="searchBar" 
          placeholder="Search commands..." 
          class="w-full p-2 rounded-md bg-gray-700 text-white border border-gray-600 focus:outline-none focus:border-gray-500"
        >
      </div>

      <div class="overflow-auto text-white rounded-md p-4 max-w-4xl mx-auto" id="commands">
        loading...
      </div>
    </div>
  </main>
</Layout>

<script>
  interface Command {
    name: string;
    category: string;
    description: string;
    aliases: string[];
    usage: string;
    example: string;
  }

  async function fetchCommands() {
    try {
      const response = await fetch("https://dev-ellie.leah.rocks/commands", {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
        },
        mode: 'cors',
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      return data.commands as Command[];
    } catch (error) {
      console.error("Failed to fetch commands:", error);
      return [];
    }
  }

  const commandsElement = document.getElementById("commands");
  const searchBar = document.getElementById("searchBar") as HTMLInputElement;
  let allCommands: Command[] = [];

  function renderCommands(commands: Command[]) {
    if (commands.length === 0) {
      commandsElement!.innerHTML = '<p class="text-red-500">No commands found.</p>';
      return;
    }

    // Group commands by category
    const groupedCommands = commands.reduce((acc, cmd) => {
      if (!acc[cmd.category]) {
        acc[cmd.category] = [];
      }
      acc[cmd.category].push(cmd);
      return acc;
    }, {} as Record<string, Command[]>);

    // Create HTML for each category
    const categoriesHtml = Object.entries(groupedCommands).map(([category, cmds], index) => `
      <div class="mb-2 border border-gray-700 rounded-lg overflow-hidden">
        <button 
          class="w-full p-4 bg-gray-800 text-left flex justify-between items-center hover:bg-gray-700 transition-colors"
          onclick="toggleCategory(${index})"
        >
          <span class="text-xl font-bold">${category}</span>
          <span class="text-sm text-gray-400">${cmds.length} commands</span>
        </button>
        <div class="category-content hidden" id="category-${index}">
          ${cmds.map(cmd => `
            <div class="p-4 border-t border-gray-700 bg-gray-900">
              <div class="flex justify-between items-start">
                <h3 class="text-lg font-bold">${cmd.name}</h3>
                <span class="text-sm text-gray-400">${cmd.aliases.length ? `aliases: ${cmd.aliases.join(", ")}` : ''}</span>
              </div>
              <p class="text-gray-300 mt-2">${cmd.description}</p>
              <div class="mt-2 text-sm text-gray-400">
                <p>Usage: ${cmd.usage}</p>
                <p>Example: ${cmd.example}</p>
              </div>
            </div>
          `).join("")}
        </div>
      </div>
    `).join("");

    commandsElement!.innerHTML = categoriesHtml;
  }

  function filterCommands(searchTerm: string) {
    const filtered = allCommands.filter(cmd => 
      cmd.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      cmd.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
      cmd.aliases.some(alias => alias.toLowerCase().includes(searchTerm.toLowerCase())) ||
      cmd.category.toLowerCase().includes(searchTerm.toLowerCase())
    );
    renderCommands(filtered);
  }

  // Add this function to handle category toggling
  window.toggleCategory = function(index: number) {
    const content = document.getElementById(`category-${index}`);
    if (content) {
      content.classList.toggle('hidden');
    }
  };

  if (commandsElement && searchBar) {
    fetchCommands().then(commands => {
      allCommands = commands;
      renderCommands(commands);

      searchBar.addEventListener('input', (e) => {
        const searchTerm = (e.target as HTMLInputElement).value;
        filterCommands(searchTerm);
      });
    });
  }
</script>

<style>
  .category-content {
    transition: max-height 0.3s ease-out;
  }
</style>
